package tilegameguidevelopment;

import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JOptionPane;

public class GameBoard extends javax.swing.JFrame {

    List<JButton> listOfTiles = new ArrayList();
    int tileNumber;
    int BOARD_SIZE = 6;
    private int[][] correctGameBoard
            = {{-1, -1, -1, -1, -1, -1},
            {-1, 1, 2, 3, 4, -1},
            {-1, 5, 6, 7, 8, -1},
            {-1, 9, 10, 11, 12, -1},
            {-1, 13, 14, 0, 15, -1},
            {-1, -1, -1, -1, -1, -1}};

    int[][] gameBoard
            = {{-1, -1, -1, -1, -1, -1},
            {-1, 1, 2, 3, 4, -1},
            {-1, 5, 6, 7, 8, -1},
            {-1, 9, 10, 11, 12, -1},
            {-1, 13, 14, 0, 15, -1},
            {-1, -1, -1, -1, -1, -1}};

    public GameBoard() {

        initComponents();
        populateListOfTiles();
        addTileListners();

    }

    private void addTileListners() {
        listOfTiles.stream().forEach((currentTile) -> {
            currentTile.addActionListener(new TileListener());
        });
    }

    private void populateListOfTiles() {

        listOfTiles.add(tile1);
        listOfTiles.add(tile2);
        listOfTiles.add(tile3);
        listOfTiles.add(tile4);
        listOfTiles.add(tile5);
        listOfTiles.add(tile6);
        listOfTiles.add(tile7);
        listOfTiles.add(tile8);
        listOfTiles.add(tile9);
        listOfTiles.add(tile10);
        listOfTiles.add(tile11);
        listOfTiles.add(tile12);
        listOfTiles.add(tile13);
        listOfTiles.add(tile14);
        listOfTiles.add(tile0);
        listOfTiles.add(tile15);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tile2 = new javax.swing.JButton();
        tile3 = new javax.swing.JButton();
        tile4 = new javax.swing.JButton();
        tile1 = new javax.swing.JButton();
        tile5 = new javax.swing.JButton();
        tile9 = new javax.swing.JButton();
        tile13 = new javax.swing.JButton();
        tile6 = new javax.swing.JButton();
        tile10 = new javax.swing.JButton();
        tile14 = new javax.swing.JButton();
        tile7 = new javax.swing.JButton();
        tile11 = new javax.swing.JButton();
        tile0 = new javax.swing.JButton();
        tile8 = new javax.swing.JButton();
        tile12 = new javax.swing.JButton();
        tile15 = new javax.swing.JButton();
        scrambleBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        tile2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile2.setText("2");
        tile2.setPreferredSize(new java.awt.Dimension(70, 70));
        tile2.setRequestFocusEnabled(false);

        tile3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile3.setText("3");
        tile3.setPreferredSize(new java.awt.Dimension(70, 70));

        tile4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile4.setText("4");
        tile4.setPreferredSize(new java.awt.Dimension(70, 70));

        tile1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile1.setText("1");
        tile1.setPreferredSize(new java.awt.Dimension(70, 70));

        tile5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile5.setText("5");
        tile5.setPreferredSize(new java.awt.Dimension(70, 70));

        tile9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile9.setText("9");
        tile9.setToolTipText("");
        tile9.setPreferredSize(new java.awt.Dimension(70, 70));

        tile13.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile13.setText("13");
        tile13.setPreferredSize(new java.awt.Dimension(70, 70));

        tile6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile6.setText("6");
        tile6.setToolTipText("");
        tile6.setPreferredSize(new java.awt.Dimension(70, 70));

        tile10.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile10.setText("10");
        tile10.setPreferredSize(new java.awt.Dimension(70, 70));

        tile14.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile14.setText("14");
        tile14.setToolTipText("");
        tile14.setPreferredSize(new java.awt.Dimension(70, 70));

        tile7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile7.setText("7");
        tile7.setPreferredSize(new java.awt.Dimension(70, 70));

        tile11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile11.setText("11");
        tile11.setMaximumSize(new java.awt.Dimension(47, 37));
        tile11.setMinimumSize(new java.awt.Dimension(47, 37));
        tile11.setPreferredSize(new java.awt.Dimension(70, 70));

        tile0.setBackground(new java.awt.Color(0, 153, 153));
        tile0.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile0.setForeground(new java.awt.Color(0, 153, 153));
        tile0.setToolTipText("");
        tile0.setEnabled(false);
        tile0.setOpaque(false);
        tile0.setPreferredSize(new java.awt.Dimension(70, 70));
        tile0.setRolloverEnabled(false);

        tile8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile8.setText("8");
        tile8.setPreferredSize(new java.awt.Dimension(70, 70));

        tile12.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile12.setText("12");
        tile12.setToolTipText("");
        tile12.setPreferredSize(new java.awt.Dimension(70, 70));

        tile15.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tile15.setText("15");
        tile15.setToolTipText("");
        tile15.setPreferredSize(new java.awt.Dimension(70, 70));

        scrambleBtn.setText("Scramble");
        scrambleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scrambleBtnActionPerformed(evt);
            }
        });

        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tile1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tile5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(scrambleBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(tile9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tile10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(tile13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tile14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(tile0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tile15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(tile11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tile12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tile1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tile8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tile12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tile15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scrambleBtn)
                    .addComponent(resetBtn))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void scrambleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scrambleBtnActionPerformed
        
        JButton tempButton = new JButton();
        Random random = new Random();
        for (int i = 0; i < 500; i++) {

            int index = (int)(Math.random()*listOfTiles.size());
	    moveClickedTile(listOfTiles.get(index));
            

        }
    }//GEN-LAST:event_scrambleBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed

        this.dispose();
        GameBoard gameBoard1 = new GameBoard();
        GameBoard.this.setVisible(true);
        resetTilePosition();

    }//GEN-LAST:event_resetBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameBoard().setVisible(true);
            }
        });
    }

    public class TileListener implements ActionListener {

        private JButton clickedTile;
        private boolean userWonGame;

        @Override
        public void actionPerformed(ActionEvent e) {
            clickedTile = (JButton) e.getSource();

            String pictureOfANumber = clickedTile.getText();
            tileNumber = Integer.parseInt(pictureOfANumber);

            if (isEmptySpotOfButton(clickedTile)) {
                moveClickedTile(clickedTile);

            }

            if (isEmptySpotANeighborOfTile(tileNumber)) {
                moveTile(tileNumber);

                if (isGameOver()) {
                    userWonGame = true;
                    JOptionPane.showMessageDialog(null, "You Won!");

                }
            }
        }

    }

    public void moveTile(int tileNumber) {
        Point2D tilePosition = getTilePosition(tileNumber);
        Point2D emptySpotPosition = getTilePosition(0);

        setTilePosition(tileNumber, emptySpotPosition);
        setTilePosition(0, tilePosition);

    }

    public void moveClickedTile(JButton clickedTile) {
        JButton tilePosition = clickedTile;
        JButton emptyTilePosition = tile0;

        Point tP = tilePosition.getLocation();
        Point eTP = emptyTilePosition.getLocation();

        clickedTile.setLocation(eTP);
        tile0.setLocation(tP);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton scrambleBtn;
    private javax.swing.JButton tile0;
    private javax.swing.JButton tile1;
    private javax.swing.JButton tile10;
    private javax.swing.JButton tile11;
    private javax.swing.JButton tile12;
    private javax.swing.JButton tile13;
    private javax.swing.JButton tile14;
    private javax.swing.JButton tile15;
    private javax.swing.JButton tile2;
    private javax.swing.JButton tile3;
    private javax.swing.JButton tile4;
    private javax.swing.JButton tile5;
    private javax.swing.JButton tile6;
    private javax.swing.JButton tile7;
    private javax.swing.JButton tile8;
    private javax.swing.JButton tile9;
    // End of variables declaration//GEN-END:variables

    public boolean isEmptySpotANeighborOfTile(int tileNumber) {

        Point2D tilePosition = this.getTilePosition(tileNumber);
        Point2D emptySpotPosition = this.getTilePosition(0);

        boolean emptySpotIsANeighborOfTile = false;

        if ((emptySpotPosition.getX() == tilePosition.getX() - 1) && (emptySpotPosition.getY() == tilePosition.getY())) {
            emptySpotIsANeighborOfTile = true;
        } else if ((emptySpotPosition.getX() == tilePosition.getX()) && (emptySpotPosition.getY() == tilePosition.getY() - 1)) {
            emptySpotIsANeighborOfTile = true;
        } else if ((emptySpotPosition.getX() == tilePosition.getX()) && (emptySpotPosition.getY() == tilePosition.getY() + 1)) {
            emptySpotIsANeighborOfTile = true;
        } else if ((emptySpotPosition.getX() == tilePosition.getX() + 1) && (emptySpotPosition.getY() == tilePosition.getY())) {
            emptySpotIsANeighborOfTile = true;
        } else {
            emptySpotIsANeighborOfTile = false;
        }

        return emptySpotIsANeighborOfTile;
    }

    public boolean isEmptySpotOfButton(JButton clickedTile) {

        JButton tilePosition = clickedTile;
        JButton emptySpotPosition;
        tilePosition.getBounds();
        tile0.getBounds();

        boolean isEmptySpotOfButton = false;

        if ((tile0.getX() == tilePosition.getX() - 76) && (tile0.getY() == tilePosition.getY())) {
            isEmptySpotOfButton = true;
        } else if ((tile0.getX() == tilePosition.getX()) && (tile0.getY() == tilePosition.getY() - 76)) {
            isEmptySpotOfButton = true;
        } else if ((tile0.getX() == tilePosition.getX()) && (tile0.getY() == tilePosition.getY() + 76)) {
            isEmptySpotOfButton = true;
        } else if ((tile0.getX() == tilePosition.getX() + 76) && (tile0.getY() == tilePosition.getY())) {
            isEmptySpotOfButton = true;
        } else {
            isEmptySpotOfButton = false;
        }

        return isEmptySpotOfButton;
    }

    private void setTilePosition(int tileNumber, Point2D tilePosition) {
        gameBoard[(int) tilePosition.getX()][(int) tilePosition.getY()] = tileNumber;
    }

    public void resetTilePosition() {
        gameBoard = correctGameBoard;
    }


    public Point2D getTilePosition(int tileNumber) {
        Point2D emptySpotLocation = new Point2D.Double(0, 0);
        for (int row = 1; row < BOARD_SIZE - 1; row++) {
            for (int col = 1; col < BOARD_SIZE - 1; col++) {
                if (gameBoard[row][col] == tileNumber) {
                    emptySpotLocation.setLocation(row, col);
                    break;
                }
            }
        }

        return emptySpotLocation;
    }

    public boolean isGameOver() {

        for (int row = 1; row < BOARD_SIZE - 1; row++) {
            for (int col = 1; col < BOARD_SIZE - 1; col++) {
                if (gameBoard[row][col] != (row - 1) * 4 + col) {
                    if (((row - 1) * 4 + col) != 16) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

}
